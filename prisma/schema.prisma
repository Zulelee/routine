// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(cuid())
  email      String   @unique
  name       String
  created_at DateTime @default(now())

  tasks         Task[]
  dailyLogs     DailyLog[]
  invoices      Invoice[]
  clients       Client[]
  projects      Project[]
  teamMembers   TeamMember[]

  @@map("users")
}

model Task {
  id          String   @id @default(cuid())
  user_id     String
  title       String
  description String?
  notes       String?
  date        DateTime
  status      TaskStatus @default(todo)
  pinned      Boolean  @default(false)
  priority    Priority?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model DailyLog {
  id            String   @id @default(cuid())
  user_id       String
  date          DateTime
  journal_entry String?
  mood          String?
  water_glasses Int      @default(0)
  exercised     Boolean  @default(false)
  sleep_hours   Float?
  day_complete  Boolean  @default(false)
  created_at    DateTime @default(now())

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, date])
  @@map("daily_logs")
}



model Client {
  id          String   @id @default(cuid())
  user_id     String
  name        String
  email       String?
  company     String?
  phone       String?
  address     String?
  notes       String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  user     User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  invoices Invoice[]
  projects Project[]

  @@map("clients")
}

model TeamMember {
  id          String   @id @default(cuid())
  user_id     String
  name        String
  email       String
  role        String
  hourly_rate Float
  is_active   Boolean  @default(true)
  notes       String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  user     User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  assignments ProjectMember[]

  @@map("team_members")
}

model Project {
  id          String        @id @default(cuid())
  user_id     String
  client_id   String
  name        String
  description String?
  status      ProjectStatus @default(planning)
  start_date  DateTime?
  end_date    DateTime?
  budget      Float?
  hourly_rate Float?
  payment_type PaymentType  @default(hourly_rate)
  notes       String?
  personal_project Boolean   @default(false)
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt

  user   User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  client Client @relation(fields: [client_id], references: [id], onDelete: Cascade)
  members ProjectMember[]

  @@map("projects")
}

model ProjectMember {
  id         String   @id @default(cuid())
  project_id String
  team_member_id String?
  name       String
  role       String?
  email      String?
  hourly_rate Float?
  payment_type PaymentType @default(hourly_rate)
  payment_amount Float?
  payment_status PaymentStatus @default(pending)
  is_active  Boolean  @default(true)
  joined_date DateTime @default(now())
  left_date  DateTime?
  notes      String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  project     Project    @relation(fields: [project_id], references: [id], onDelete: Cascade)
  teamMember  TeamMember? @relation(fields: [team_member_id], references: [id], onDelete: SetNull)

  @@map("project_members")
}

model Invoice {
  id          String        @id @default(cuid())
  user_id     String
  client_id   String
  invoice_number String
  title       String
  description String?
  amount      Float
  currency    String        @default("USD")
  tax_rate    Float         @default(0)
  status      InvoiceStatus @default(draft)
  issue_date  DateTime
  due_date    DateTime
  sent_date   DateTime?
  paid_date   DateTime?
  notes       String?
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt

  user   User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  client Client @relation(fields: [client_id], references: [id], onDelete: Cascade)

  @@unique([user_id, invoice_number])
  @@map("invoices")
}



enum TaskStatus {
  todo
  in_progress
  done
  blocked
}

enum Priority {
  low
  medium
  high
}

enum InvoiceStatus {
  draft
  sent
  paid
  overdue
  cancelled
}

enum ProjectStatus {
  planning
  active
  on_hold
  completed
  cancelled
}

enum PaymentType {
  fixed_budget
  hourly_rate
}

enum PaymentStatus {
  pending
  paid
  overdue
}

